1.首先为了测试，编写了另外一个cpp文件（test_job1.cpp），但是在编译运行的时候报错
error: conflicting declaration of C function ‘int main()’
previous declaration ‘int main(int, char**)’
于是为了避免重复定义main函数并且便于测试，将所有会用到的函数封装起来并单独测试（helper.cpp, helper.h）

其次在封装函数再编译的时候只用gcc job1.cpp -o job1报错
in function `main':
job1.cpp:(.text+0x19c): undefined reference to `ThreeIntSort(int*, int*, int*)'
然后发现头文件只写了#include "helper.h"，并没有包含进函数原型，于是解决如下
gcc job1.c helper.c -o job1

2.用测试文件测试一下，发现错误
SwapInt 测试通过！
ThreeIntSort 测试通过！
test_job: test_job1.cpp:61: void test_FourIntSort(): Assertion `FourIntSort(&a, &b, &c, &d) == true' failed.
Aborted (core dumped)
根据报错得知是这个用例
    // 测试用例 2：逆序
    a = 4; b = 3; c = 2; d = 1;
    assert(FourIntSort(&a, &b, &c, &d) == true);
    assert(a == 1 && b == 2 && c == 3 && d == 4);

先用gdb调试一下 gcc job1.cpp -o job1 -g 用-g加上调试程序方面的支持
然后把断点设置在返回前一行，打印一下各变量的值（其实如果返回语句没检查得那么严格的话在终端就可以看见了，但是并不合适，既然要求“false，排序失败”）
Breakpoint 1, FourIntSort (x1=0x7fffffffd09c, x2=0x7fffffffd0a0, x3=0x7fffffffd0a4, x4=0x7fffffffd0a8) at job1.cpp:95
95              return *x1 <= *x2 && *x2 <= *x3 && *x3 <= *x4;
(gdb) print *x1
$1 = 2
(gdb) print *x2
$2 = 1
(gdb) print *x3
$3 = 3
(gdb) print *x4
$4 = 4
于是发现是第一个和第二个变量的位置没有调换，我写的代码的逻辑是前三个和后三个先后排列
然后再判断分界处（即第一个和第二个）的大小关系，所以错误明显在这里，回去看发现是
if(x1 > x2)写成了地址比较
改成if(*x1 > *x2)，四个数写错了那五个数应该也写错了，一起改完。
然后回想一下根据gdb给的一堆信息可以看到x1=0x7fffffffd09c, x2=0x7fffffffd0a0, x3=0x7fffffffd0a4, x4=0x7fffffffd0a8
四个变量是按地址从小到大的顺序排列的，所以做指针比较x1<x2永远为真。

3.测试数据比较常规，每个排序函数都用了顺序、逆序、随机顺序、有相同元素、所有元素相同五个案例，
由于函数本身比较简单，复杂的用例似乎也没什么必要。

4.在原文件中没发现什么错误，只是FiveIntSort函数的注释写成了ThreeIntSort。